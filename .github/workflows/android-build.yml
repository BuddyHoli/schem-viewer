# Build Android APK (assembleRelease). Legt apk als Artefakt ab.
name: Build Android APK

on:
  workflow_dispatch:
    inputs:
      sign:
        description: 'Sign release APK (requires keystore secrets)'
        required: false
        default: 'false'
  push:
    branches:
      - main
      - master

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Java (for Gradle / jarsigner)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Android SDK tools (cmdline tools + platform-tools)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -e
          echo "Installing Android commandline tools to $ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT"
          cd "$ANDROID_SDK_ROOT"
          # Download command line tools (Linux). Replace URL if Google updates package name.
          curl -sSfL https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -o cmdline-tools.zip
          unzip -q cmdline-tools.zip -d cmdline-tools-temp
          mkdir -p cmdline-tools/latest
          # Move extracted files into "latest" layout expected by sdkmanager
          mv cmdline-tools-temp/cmdline-tools/* cmdline-tools/latest/
          rm -rf cmdline-tools.zip cmdline-tools-temp
          CMDLINE="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
          # Make sure sdkmanager is executable
          chmod +x "$CMDLINE"/sdkmanager || true
          # Accept licenses non-interactively (may print warnings)
          yes | "$CMDLINE"/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses || true
          # Install required packages for building (platform-tools, platform, build-tools)
          "$CMDLINE"/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-31" "build-tools;31.0.0"
          # Verify installation
          echo "Installed SDK packages:"
          "$CMDLINE"/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --list

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install npm dependencies (use lockfile if present)
        run: |
          if [ -f package-lock.json ]; then
            echo "package-lock.json found -> running npm ci"
            npm ci
          else
            echo "No package-lock.json found -> running npm install and generating lockfile"
            npm install
            ls -lh package-lock.json || true
          fi

      - name: Build web (Vite)
        run: npm run build

      - name: Install Capacitor CLI (if not present) and add/sync android
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
          # ensure npx can find sdk tools if needed
          PATH: ${{ github.workspace }}/android-sdk/cmdline-tools/latest/bin:${{ github.workspace }}/android-sdk/platform-tools:${{ env.PATH }}
        run: |
          set -e
          echo "Install Capacitor CLI locally"
          npm install --no-save @capacitor/cli @capacitor/core
          # If the android platform folder doesn't exist, add it.
          if [ ! -d android ]; then
            echo "android/ not found -> adding android platform with Capacitor"
            npx cap add android
          else
            echo "android/ exists -> skipping cap add"
          fi
          # Always sync & copy web assets to native project
          npx cap sync android
          npx cap copy android

      - name: Build Android (Gradle assembleRelease)
        working-directory: android
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
          # ensure gradle can find sdk tools
          PATH: ${{ github.workspace }}/android-sdk/platform-tools:${{ github.workspace }}/android-sdk/cmdline-tools/latest/bin:${{ env.PATH }}
        run: |
          chmod +x ./gradlew
          ./gradlew assembleRelease --no-daemon

      - name: Decode keystore (optional)
        if: ${{ github.event.inputs.sign == 'true' }}
        run: |
          mkdir -p android/app
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/release-keystore.jks

      - name: Sign release APK (optional)
        if: ${{ github.event.inputs.sign == 'true' }}
        working-directory: android
        env:
          KEYSTORE_PATH: app/release-keystore.jks
          KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASS: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          APK_UNSIGNED=app/build/outputs/apk/release/app-release-unsigned.apk
          APK_ALIGNED=app/build/outputs/apk/release/app-release-aligned.apk
          APK_SIGNED=app/build/outputs/apk/release/app-release.apk
          echo "Unsigned apk exists: $APK_UNSIGNED"
          # Sign using jarsigner (provided by setup-java)
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore "$KEYSTORE_PATH" -storepass "$KEYSTORE_PASS" "$APK_UNSIGNED" "$KEY_ALIAS"
          # Try to find zipalign in SDK build-tools
          ZIPALIGN=$(find "${{ github.workspace }}/android-sdk" -type f -name zipalign | head -n 1 || true)
          if [ -n "$ZIPALIGN" ]; then
            cp "$APK_UNSIGNED" "$APK_ALIGNED"
            "$ZIPALIGN" -v -p 4 "$APK_ALIGNED" "$APK_SIGNED"
          else
            echo "zipalign not found; copying unsigned APK as final"
            cp "$APK_UNSIGNED" "$APK_SIGNED"
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/release/*.apk
