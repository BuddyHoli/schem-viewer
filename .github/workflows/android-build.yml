# Build Android APK (assembleRelease). Legt apk als Artefakt ab.
name: Build Android APK

on:
  workflow_dispatch:
    inputs:
      sign:
        description: 'Sign release APK (requires keystore secrets)'
        required: false
        default: 'false'
  push:
    branches:
      - main
      - master

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Java (for Gradle / jarsigner)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Android SDK tools
        # Install necessary Android SDK components (build-tools, platform-tools)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 31
          target: default
          arch: x86_64
          force-avd-creation: false

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install npm dependencies
        run: npm ci

      - name: Build web (Vite)
        run: npm run build

      - name: Install Capacitor CLI (if not present) and sync
        run: |
          npm install --no-save @capacitor/cli @capacitor/core
          npx cap sync android
          npx cap copy android

      - name: Build Android (Gradle assembleRelease)
        working-directory: android
        run: |
          chmod +x ./gradlew
          ./gradlew assembleRelease --no-daemon

      - name: Decode keystore (optional)
        if: ${{ github.event.inputs.sign == 'true' }}
        run: |
          mkdir -p android/app
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/release-keystore.jks

      - name: Sign release APK (optional)
        if: ${{ github.event.inputs.sign == 'true' }}
        working-directory: android
        env:
          KEYSTORE_PATH: app/release-keystore.jks
          KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASS: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          APK_UNSIGNED=app/build/outputs/apk/release/app-release-unsigned.apk
          APK_ALIGNED=app/build/outputs/apk/release/app-release-aligned.apk
          APK_SIGNED=app/build/outputs/apk/release/app-release.apk
          echo "Unsigned apk exists: $APK_UNSIGNED"
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore "$KEYSTORE_PATH" -storepass "$KEYSTORE_PASS" "$APK_UNSIGNED" "$KEY_ALIAS"
          ZIPALIGN=$(find / -type f -name zipalign 2>/dev/null | head -n 1 || true)
          if [ -n "$ZIPALIGN" ]; then
            cp "$APK_UNSIGNED" "$APK_ALIGNED"
            "$ZIPALIGN" -v -p 4 "$APK_ALIGNED" "$APK_SIGNED"
          else
            echo "zipalign not found; copying unsigned APK as final"
            cp "$APK_UNSIGNED" "$APK_SIGNED"
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/release/*.apk
